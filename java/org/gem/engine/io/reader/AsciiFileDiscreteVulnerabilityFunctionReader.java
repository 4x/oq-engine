/*
 * [COPYRIGHT]
 *
 * [NAME] is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.gem.engine.io.reader;

import static ch.lambdaj.Lambda.having;
import static ch.lambdaj.Lambda.on;
import static ch.lambdaj.Lambda.selectUnique;
import static org.hamcrest.Matchers.equalTo;

import java.util.List;

import org.gem.engine.core.reader.DiscreteVulnerabilityFunctionReader;
import org.gem.engine.data.DiscreteVulnerabilityFunction;

/**
 * Reads a set of {@link DiscreteVulnerabilityFunction} from an external ascii file.
 * <p>
 * This implementation reads and caches all the functions on the first request, so it works well only for files with
 * a small amount of functions. This implementation is not thread safe. This is the file format used:
 * <p>
 * <i>Population   Deaths<br/>
 * AF   MMI LN  5.0 9.52E-06    0.3 5.5 2.52E-05    0.3 6.0 5.86E-05    0.3 6.5 1.23E-04    0.3[...]<br/>
 * AD   MMI LN  5.0 9.52E-06    0.3 5.5 2.52E-05    0.3 6.0 5.86E-05    0.3 6.5 1.23E-04    0.3[...]<br/>
 * [...]
 * </i><p>
 * To know more about the format, take a look at the Report11-GEM1_Global_Risk_Calculations document, chapter 6.3.
 * 
 * @author Andrea Cerisara
 * @version $Id: AsciiFileDiscreteVulnerabilityFunctionReader.java 537 2010-06-16 18:29:36Z acerisara $
 */
public class AsciiFileDiscreteVulnerabilityFunctionReader implements DiscreteVulnerabilityFunctionReader
{

    private static final String SEPARATOR = "\t";

    private final String filename;
    private final boolean loadMeans;
    private List<DiscreteVulnerabilityFunction> functions;

    private AsciiFileDiscreteVulnerabilityFunctionReader(String filename, boolean loadMeans)
    {
        this.filename = filename;
        this.loadMeans = loadMeans;
    }

    /**
     * Creates a reader for functions which have the mean as value for each IML.
     * 
     * @param filename the name of the file to use
     * @return the reader for the mean functions
     */
    public static AsciiFileDiscreteVulnerabilityFunctionReader meansReader(String filename)
    {
        return new AsciiFileDiscreteVulnerabilityFunctionReader(filename, true);
    }

    /**
     * Creates a reader for functions which have the cov as value for each IML.
     * 
     * @param filename the name of the file to use
     * @return the reader for the cov functions
     */
    public static AsciiFileDiscreteVulnerabilityFunctionReader covsReader(String filename)
    {
        return new AsciiFileDiscreteVulnerabilityFunctionReader(filename, false);
    }

    @Override
    public DiscreteVulnerabilityFunction readByCode(String code)
    {
        load();

        if (isPresent(code))
        {
            return select(code);
        }
        else
        {
            throw new RuntimeException("Function with code " + code + " not found!");
        }
    }

    private DiscreteVulnerabilityFunction select(String code)
    {
        return selectUnique(functions, having(on(DiscreteVulnerabilityFunction.class).getVulnerabilityCode(),
                equalTo(code)));
    }

    private boolean isPresent(String code)
    {
        return select(code) != null;
    }

    private void load()
    {
        if (functions == null)
        {
            // one header line to skip
            AsciiFileReader reader = new AsciiFileReader(filename).open().skipLines(1);
            functions = reader.selectAllAndClose(new AsciiFileReader.LineParser<DiscreteVulnerabilityFunction>()
            {

                @Override
                public DiscreteVulnerabilityFunction parse(String line)
                {
                    return functionFromLine(line);
                }
            });
        }
    }

    private String lossType()
    {
        // loss type is the first value, Population   Deaths
        return new AsciiFileReader(filename).open().parseNextLineAndClose(SEPARATOR)[1];
    }

    private String assetType()
    {
        // asset type is the second value, Population   Deaths
        return new AsciiFileReader(filename).open().parseNextLineAndClose(SEPARATOR)[0];
    }

    private DiscreteVulnerabilityFunction functionFromLine(String line)
    {
        String[] data = line.split(SEPARATOR);

        // AF MMI LN 5.0 9.52E-06 0.3 5.5 2.52E-05 [...]
        DiscreteVulnerabilityFunction result = new DiscreteVulnerabilityFunction(data[0], assetType(), lossType(),
                data[2], data[1]);

        // values start from index three
        for (int i = 3; i < data.length - 2; i += 3)
        {
            result.addPair(Double.parseDouble(data[i]), Double.parseDouble(data[i + (loadMeans ? 1 : 2)]));
        }

        return result;
    }

}
