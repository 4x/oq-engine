/*
 * [COPYRIGHT]
 *
 * [NAME] is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.gem.engine.data;

import java.util.ArrayList;
import java.util.List;

/**
 * Describes a discrete vulnerability function.
 * <p>
 * For more information see Report11-GEM1_Global_Risk_Calculations document, chapter 6.
 *
 * @author Andrea Cerisara
 * @version $Id: DiscreteVulnerabilityFunction.java 537 2010-06-16 18:29:36Z acerisara $
 */
public class DiscreteVulnerabilityFunction extends FixedDiscreteFunction implements Computable
{

    private final String code;
    private final String lossType;
    private final String assetType;
    private final String distributionType;
    private final String intensityMeasureType;

    /**
     * @param code the code of the function
     * @param assetType the asset type to which the function is applicable
     * @param lossType the loss type described by the function
     * @param distributionType the distribution type used by the function
     * @param intensityMeasureType the intensity measure type used by the function
     */
    public DiscreteVulnerabilityFunction(String code, String assetType, String lossType, String distributionType,
            String intensityMeasureType)
    {
        this.code = code;
        this.lossType = lossType;
        this.assetType = assetType;
        this.distributionType = distributionType;
        this.intensityMeasureType = intensityMeasureType;
    }

    /**
     * Returns the vulnerability code of this function.
     * 
     * @return the vulnerability code of this function
     */
    public String getVulnerabilityCode()
    {
        return code;
    }

    /**
     * Returns the asset type to which this function is applicable.
     * 
     * @return the asset type to which this function is applicable
     */
    public String applicableToAssetsOfType()
    {
        return assetType;
    }

    /**
     * Returns the loss type described by this function.
     * 
     * @return the loss type described by this function
     */
    public String describeLossesOfType()
    {
        return lossType;
    }

    /**
     * Returns the intensity measure type described by this function.
     * 
     * @return the intensity measure type described by this function
     */
    public String getIntensityMeasureType()
    {
        return intensityMeasureType;
    }

    /**
     * Returns the distribution type used by this function.
     * 
     * @return the distribution type used by this function
     */
    public String distributionType()
    {
        return distributionType;
    }

    @Override
    public String toString()
    {
        return getVulnerabilityCode();
    }

    /**
     * Two vulnerability functions are equal when the vulnerability code is equal.
     */
    @Override
    public boolean equals(Object obj)
    {
        if (!(obj instanceof DiscreteVulnerabilityFunction))
        {
            return false;
        }

        DiscreteVulnerabilityFunction other = (DiscreteVulnerabilityFunction) obj;
        return getVulnerabilityCode().equals(other.getVulnerabilityCode());
    }

    @Override
    public int hashCode()
    {
        return getVulnerabilityCode().hashCode();
    }

    /**
     * Tells if the given IML is outside the range of the IMLs supported by this function.
     * 
     * @param IML the IML to use
     * @return <code>true</code> if the given IML is outside the range, <code>false</code> otherwise
     */
    public boolean outOfBounds(double IML)
    {
        List<Double> IMLs = new ArrayList<Double>(getDomain());
        return IML < IMLs.get(0) || IML > IMLs.get(IMLs.size() - 1);
    }

    @Override
    public boolean isComputable()
    {
        return true; // TODO Should we check against the list of IMLs?
    }

}
