/*
 * [COPYRIGHT]
 *
 * [NAME] is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.gem.engine.risk.core.event.listener;

import static org.gem.engine.risk.core.AdditionalPipeKeys.COUNTRY;
import static org.gem.engine.risk.data.builder.DiscreteVulnerabilityFunctionBuilder.aFunction;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

import org.gem.engine.risk.core.event.listener.DiscreteVulnerabilityFunctionLoader;
import org.gem.engine.risk.core.reader.DiscreteVulnerabilityFunctionReader;
import org.gem.engine.risk.core.reader.VulnerabilityCodeReader;
import org.gem.engine.risk.data.DiscreteVulnerabilityFunction;
import org.gem.engine.risk.data.country.Country;
import org.junit.Before;
import org.junit.Test;

public class DiscreteVulnerabilityFunctionLoaderTest extends BaseFilterTest implements VulnerabilityCodeReader,
        DiscreteVulnerabilityFunctionReader
{

    private static final String CODE = "XX";
    private static final Integer ADMIN_CODE = 1;

    @Before
    public void setUp()
    {
        addToPipe(COUNTRY, Country.newCountry(ADMIN_CODE));
        filter = new DiscreteVulnerabilityFunctionLoader(this, this, A_KEY);
    }

    @Test
    public void shouldLoadAVulnerabilityFunctionIntoThePipe()
    {
        runOn(anySite());
        assertEquals(aFunction().withCode(CODE).build(), pipeValueAtKey(A_KEY));
    }

    @Override
    public String readByAdminCode(int adminCode)
    {
        assertThat(adminCode, is(ADMIN_CODE));
        return CODE;
    }

    @Override
    public DiscreteVulnerabilityFunction readByCode(String code)
    {
        assertThat(code, is(CODE));
        return aFunction().withCode(CODE).build();
    }

}
