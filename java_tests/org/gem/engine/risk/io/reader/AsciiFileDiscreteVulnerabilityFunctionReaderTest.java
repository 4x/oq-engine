/*
 * [COPYRIGHT]
 *
 * [NAME] is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.gem.engine.risk.io.reader;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.gem.engine.risk.BaseTestCase;
import org.gem.engine.risk.core.reader.DiscreteVulnerabilityFunctionReader;
import org.gem.engine.risk.data.DiscreteVulnerabilityFunction;
import org.gem.engine.risk.data.distribution.DistributionFactory;
import org.gem.engine.risk.io.reader.AsciiFileDiscreteVulnerabilityFunctionReader;
import org.junit.Before;
import org.junit.Test;

public class AsciiFileDiscreteVulnerabilityFunctionReaderTest extends BaseTestCase
{

    private DiscreteVulnerabilityFunctionReader functions;

    @Before
    public void setUp()
    {
        functions = AsciiFileDiscreteVulnerabilityFunctionReader.meansReader((pathFor("functions.txt")));
    }

    @Test
    public void shouldLoadAVulnerabilityFunctionGivenACode()
    {
        assertEquals("AF", functions.readByCode("AF").getVulnerabilityCode());
    }

    @Test
    public void shouldLoadTheAssetTypeToWhichTheFunctionCanBeApplied()
    {
        assertEquals("Population", functions.readByCode("AF").applicableToAssetsOfType());
    }

    @Test
    public void shouldLoadTheLossTypeDescribedByTheFunction()
    {
        assertEquals("Deaths", functions.readByCode("AF").describeLossesOfType());
    }

    @Test
    public void shouldLoadTheIntensityMeasureType()
    {
        assertEquals("MMI", functions.readByCode("AF").getIntensityMeasureType());
    }

    @Test
    public void shouldLoadTheDistributionType()
    {
        assertEquals(DistributionFactory.LOG_NORMAL, functions.readByCode("AF").distributionType());
    }

    @Test
    public void shouldLoadTheRelatedRatios1()
    {
        DiscreteVulnerabilityFunction function = functions.readByCode("AF");
        assertEquals(11, function.getDomain().size());

        assertTrue(function.getDomain().contains(5.0));
        assertTrue(function.getDomain().contains(5.5));
        assertTrue(function.getDomain().contains(6.0));
        assertTrue(function.getDomain().contains(6.5));
        assertTrue(function.getDomain().contains(7.0));
        assertTrue(function.getDomain().contains(7.5));
        assertTrue(function.getDomain().contains(8.0));
        assertTrue(function.getDomain().contains(8.5));
        assertTrue(function.getDomain().contains(9.0));
        assertTrue(function.getDomain().contains(9.5));
        assertTrue(function.getDomain().contains(10.0));

        assertEquals(9.52E-06, function.getFor(5.0), 0.0);
        assertEquals(2.52E-05, function.getFor(5.5), 0.0);
        assertEquals(5.86E-05, function.getFor(6.0), 0.0);
        assertEquals(1.23E-04, function.getFor(6.5), 0.0);
        assertEquals(2.38E-04, function.getFor(7.0), 0.0);
        assertEquals(4.30E-04, function.getFor(7.5), 0.0);
        assertEquals(7.29E-04, function.getFor(8.0), 0.0);
        assertEquals(1.18E-03, function.getFor(8.5), 0.0);
        assertEquals(1.81E-03, function.getFor(9.0), 0.0);
        assertEquals(2.69E-03, function.getFor(9.5), 0.0);
        assertEquals(3.86E-03, function.getFor(10.0), 0.0);
    }

    @Test
    public void shouldLoadTheRelatedRatios2()
    {
        DiscreteVulnerabilityFunction function = functions.readByCode("CL");

        assertTrue(function.getDomain().contains(5.0));
        assertTrue(function.getDomain().contains(5.5));
        assertTrue(function.getDomain().contains(6.0));
        assertTrue(function.getDomain().contains(6.5));
        assertTrue(function.getDomain().contains(7.0));
        assertTrue(function.getDomain().contains(7.5));
        assertTrue(function.getDomain().contains(8.0));
        assertTrue(function.getDomain().contains(8.5));
        assertTrue(function.getDomain().contains(9.0));

        assertEquals(8.84E-07, function.getFor(5.0), 0.0);
        assertEquals(2.54E-06, function.getFor(5.5), 0.0);
        assertEquals(6.39E-06, function.getFor(6.0), 0.0);
        assertEquals(1.45E-05, function.getFor(6.5), 0.0);
        assertEquals(2.99E-05, function.getFor(7.0), 0.0);
        assertEquals(5.75E-05, function.getFor(7.5), 0.0);
        assertEquals(1.04E-04, function.getFor(8.0), 0.0);
        assertEquals(1.77E-04, function.getFor(8.5), 0.0);
        assertEquals(2.88E-04, function.getFor(9.0), 0.0);
    }

    @Test
    public void shouldLoadTheRelatedRatios3()
    {
        functions = AsciiFileDiscreteVulnerabilityFunctionReader.covsReader((pathFor("functions.txt")));
        DiscreteVulnerabilityFunction function = functions.readByCode("AF");

        assertEquals(11, function.getDomain().size());

        assertTrue(function.getDomain().contains(5.0));
        assertTrue(function.getDomain().contains(5.5));
        assertTrue(function.getDomain().contains(6.0));
        assertTrue(function.getDomain().contains(6.5));
        assertTrue(function.getDomain().contains(7.0));
        assertTrue(function.getDomain().contains(7.5));
        assertTrue(function.getDomain().contains(8.0));
        assertTrue(function.getDomain().contains(8.5));
        assertTrue(function.getDomain().contains(9.0));
        assertTrue(function.getDomain().contains(9.5));
        assertTrue(function.getDomain().contains(10.0));

        assertEquals(0.3, function.getFor(5.0), 0.0);
        assertEquals(0.3, function.getFor(5.5), 0.0);
        assertEquals(0.3, function.getFor(6.0), 0.0);
        assertEquals(0.3, function.getFor(6.5), 0.0);
        assertEquals(0.3, function.getFor(7.0), 0.0);
        assertEquals(0.3, function.getFor(7.5), 0.0);
        assertEquals(0.3, function.getFor(8.0), 0.0);
        assertEquals(0.3, function.getFor(8.5), 0.0);
        assertEquals(0.3, function.getFor(9.0), 0.0);
        assertEquals(0.3, function.getFor(9.5), 0.0);
        assertEquals(0.3, function.getFor(10.0), 0.0);
    }

    @Test
    public void shouldLoadTheRelatedRatios4()
    {
        functions = AsciiFileDiscreteVulnerabilityFunctionReader.covsReader((pathFor("functions.txt")));
        DiscreteVulnerabilityFunction function = functions.readByCode("CL");

        assertTrue(function.getDomain().contains(5.0));
        assertTrue(function.getDomain().contains(5.5));
        assertTrue(function.getDomain().contains(6.0));
        assertTrue(function.getDomain().contains(6.5));
        assertTrue(function.getDomain().contains(7.0));
        assertTrue(function.getDomain().contains(7.5));
        assertTrue(function.getDomain().contains(8.0));
        assertTrue(function.getDomain().contains(8.5));
        assertTrue(function.getDomain().contains(9.0));

        assertEquals(0.3, function.getFor(5.0), 0.0);
        assertEquals(0.3, function.getFor(5.5), 0.0);
        assertEquals(0.3, function.getFor(6.0), 0.0);
        assertEquals(0.3, function.getFor(6.5), 0.0);
        assertEquals(0.3, function.getFor(7.0), 0.0);
        assertEquals(0.3, function.getFor(7.5), 0.0);
        assertEquals(0.3, function.getFor(8.0), 0.0);
        assertEquals(0.3, function.getFor(8.5), 0.0);
        assertEquals(0.3, function.getFor(9.0), 0.0);
    }

    @Test(expected = RuntimeException.class)
    public void shouldRaiseAnExceptionIfTheIsoCodeIsNotPresent()
    {
        functions.readByCode("XX");
    }

}
