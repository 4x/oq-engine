# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import os
import unittest

from opengem.parser import parser_vulnerability_model

TEST_FILE = 'VulnerabilityModelFile-test.xml'

data_dir = os.path.join(os.path.dirname(__file__), 'data')


class VulnerabilityModelFileTestCase(unittest.TestCase):
	
    def test_filter_attribute_constraint(self):
	    """ This test uses the attribute constraint filter to select items
	    from the input file. We assume here that the parser yields the
	    items in the same order as specified in the example XML file. In
	    a general case it would be better not to assume the order of 
	    yielded items to be known, but to locate each yielded result
	    item in a set of expected results.
	    """
	    test_attribute_dicts = [
	        {'Asset': 'Population',
	        'Loss': 'Fatalities',
	        'ID': 'IR',
	        'ProbabilisticDistribution': 'LN',
            'IntensityMeasureType': 'MMI',
            'IntensityMeasureValues': [5.00, 5.50, 6.00,
            6.50, 7.00, 7.50, 8.00, 8.50, 9.00, 9.50, 10.00]}
	    ]

	    expected_results = [ [{'Asset': 'Population',
                                'Loss': 'Fatalities',
                                'ID': 'IR',
                                'ProbabilisticDistribution': 'LN',
                                'IntensityMeasureType': 'MMI',
                                'IntensityMeasureValues': [5.00, 5.50, 6.00,
                                6.50, 7.00, 7.50, 8.00, 8.50, 9.00, 9.50, 10.00]}],
                                [{'Asset': 'Population',
                                'Loss': 'Fatalities',
                                'ID': 'PK',
                                'ProbabilisticDistribution': 'LN',
                                'IntensityMeasureType': 'MMI',
                                'IntensityMeasureValues': [5.00, 5.50, 6.00,
                                6.50, 7.00, 7.50, 8.00, 8.50, 9.00, 9.50, 10.00]}],
                                [{'Asset': 'Population',
                                'Loss': 'Fatalities',
                                'ID': 'VE',
                                'ProbabilisticDistribution': 'LN',
                                'IntensityMeasureType': 'MMI',
                                'IntensityMeasureValues': [5.00, 5.50, 6.00,
                                6.50, 7.00, 7.50, 8.00, 8.50, 9.00, 9.50, 10.00]}],
	                       ]
	                       
	                       
	    for attr_test_counter, curr_attribute_dict in enumerate(
	        test_attribute_dicts):
                attr_const = parser_vulnerability_model. \
                            VulnerabilityModelConstraint(curr_attribute_dict)

	        vulnerability = parser_vulnerability_model.VulnerabilityModelFile( \
	                                        os.path.join(data_dir,TEST_FILE))
            																	
	        expected_result_counter = 10
	        counter = None
	        
	        for (counter, vulnerability_attr) in enumerate(
	            vulnerability.filter(attribute_constraint=attr_const)):
	            self.assertEqual(vulnerability_attr, expected_results \
	                                        [attr_test_counter][counter],
	                "filter yielded unexpected attribute values at position" \
	                " %s: %s, %s" % (counter, vulnerability_attr, 
	                    expected_results[attr_test_counter][counter]))

	        # ensure that generator yielded at least one item
	        self.assertTrue(counter is not None, 
	            "filter yielded nothing although %s item(s) were expected" % \
	            len(expected_results[attr_test_counter]))


	        # ensure that generator returns exactly the number of items of the
	        # expected result list
            self.assertEqual(counter, 
	            len(expected_results[attr_test_counter])-1,
	            "filter yielded wrong number of items (%s), expected were %s" \
	            % (counter+1, len(expected_results[attr_test_counter])))
	            
	   